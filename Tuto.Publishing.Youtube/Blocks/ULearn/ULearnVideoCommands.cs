using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media;

namespace Tuto.Publishing
{
	public class ULearnVideoCommands : VideoCommandBlockModel<ULearnSource, ULearnLectureCommands>
	{
		public ULearnVideoCommands(ULearnSource source, VideoWrap wrap)
			: base(source, wrap)
		{
			Commands.Add(new VisualCommand(Compile, () => true, "compile.png"));
            Commands.Add(new VisualCommand(() => Process.Start("\"" + Source.FileForSlide(Wrap).FullName + "\""), () => true, "view.png"));
        }



        string CreateContent(string entry)
        {
            var template = @"
//automatically generated by Tuto
using uLearn;
namespace {0} 
{{
    [Slide(@""{1}"",""{2}"")]
    public class {3}
        {{
{4}
        }}
}}";

            return string.Format(template,
                Source.Settings.CourseAbbreviation,
                Wrap.Caption,
                Wrap.Guid,
                Source.CSConvert(Wrap.Caption),
                entry);
        }

        string CreateVideoEntry()
        {
            var clip =  Wrap.BlockOfType<YoutubeVideoCommands>().YoutubeClip;
            if (clip != null) return string.Format("\t\t//#video " + clip.Id);
            return "";
        }

        string PrepareGalleryAndCreateEntry()
        {
            var latexBlock = Wrap.BlockOfType<LatexVideoCommands>();
            if (latexBlock.Status.ExportPrevented()) return "";

			var dstFile = new FileInfo(
				Path.Combine(Source.FileForSlide(Wrap).Directory.FullName,
				"_"+Source.FilePrefixForSlide(Wrap) + ".pdf"));
            latexBlock.PdfFile.CopyTo(dstFile.FullName,true);
            return "\t\t/*\n\t\t[Презентация](" + dstFile.Name + ")\n\t\t*/\n";

        }

        public void Compile()
        {
            if (!Source.FileForSlide(Wrap).Directory.Exists) Source.FileForSlide(Wrap).Directory.Create();
            var content = CreateContent(CreateVideoEntry()+"\n"+PrepareGalleryAndCreateEntry());
			System.IO.File.WriteAllText(Source.FileForSlide(Wrap).FullName, content);
        }

       

		public override string ImageFileName
		{
			get { return "ULearn.png"; }
		}

		public override IEnumerable<BlockStatus> Status
		{
			get { yield return BlockStatus.OK().WithBrush(Brushes.Transparent); }
		}
	}
}
